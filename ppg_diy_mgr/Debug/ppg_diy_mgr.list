
ppg_diy_mgr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006b8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08000850  08000850  00001850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000888  08000888  0000200c  2**0
                  CONTENTS
  4 .ARM          00000008  08000888  08000888  00001888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000890  08000890  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000890  08000890  00001890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000894  08000894  00001894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000898  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000000c  080008a4  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  080008a4  00002034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a66  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000655  00000000  00000000  00003aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  000040f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000016c  00000000  00000000  000042f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000145e3  00000000  00000000  00004464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002249  00000000  00000000  00018a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081f3e  00000000  00000000  0001ac90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009cbce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006b8  00000000  00000000  0009cc14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0009d2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000838 	.word	0x08000838

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08000838 	.word	0x08000838

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	db0b      	blt.n	8000212 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	f003 021f 	and.w	r2, r3, #31
 8000200:	4907      	ldr	r1, [pc, #28]	@ (8000220 <__NVIC_EnableIRQ+0x38>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	095b      	lsrs	r3, r3, #5
 8000208:	2001      	movs	r0, #1
 800020a:	fa00 f202 	lsl.w	r2, r0, r2
 800020e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	e000e100 	.word	0xe000e100

08000224 <main>:
uint8_t tx_buffer[5];
volatile uint8_t latch;
volatile uint8_t count = 0;
volatile int i = 1000000;
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
	UART2_init();
 800022a:	f000 f997 	bl	800055c <UART2_init>
	ADC1_init();
 800022e:	f000 f93b 	bl	80004a8 <ADC1_init>
	DMA_init();
 8000232:	f000 f883 	bl	800033c <DMA_init>
	TIM2_init();
 8000236:	f000 f8db 	bl	80003f0 <TIM2_init>
	while(i > 0) i--;
 800023a:	e004      	b.n	8000246 <main+0x22>
 800023c:	4b23      	ldr	r3, [pc, #140]	@ (80002cc <main+0xa8>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	3b01      	subs	r3, #1
 8000242:	4a22      	ldr	r2, [pc, #136]	@ (80002cc <main+0xa8>)
 8000244:	6013      	str	r3, [r2, #0]
 8000246:	4b21      	ldr	r3, [pc, #132]	@ (80002cc <main+0xa8>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	2b00      	cmp	r3, #0
 800024c:	dcf6      	bgt.n	800023c <main+0x18>
	READY();
 800024e:	f000 f9d5 	bl	80005fc <READY>
	UART_Write("Zaczynamy pomiar\n");
 8000252:	481f      	ldr	r0, [pc, #124]	@ (80002d0 <main+0xac>)
 8000254:	f000 f842 	bl	80002dc <UART_Write>

	while(1)
	{
		if(latch == 1){
 8000258:	4b1e      	ldr	r3, [pc, #120]	@ (80002d4 <main+0xb0>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	b2db      	uxtb	r3, r3
 800025e:	2b01      	cmp	r3, #1
 8000260:	d1fa      	bne.n	8000258 <main+0x34>
			char uart_buf[10];
			char *uart=uart_buf;
 8000262:	463b      	mov	r3, r7
 8000264:	60fb      	str	r3, [r7, #12]
			itoa(adc_buf[0], uart, 10);
 8000266:	4b1c      	ldr	r3, [pc, #112]	@ (80002d8 <main+0xb4>)
 8000268:	881b      	ldrh	r3, [r3, #0]
 800026a:	220a      	movs	r2, #10
 800026c:	68f9      	ldr	r1, [r7, #12]
 800026e:	4618      	mov	r0, r3
 8000270:	f000 fa7a 	bl	8000768 <itoa>
			while(*uart) uart++;
 8000274:	e002      	b.n	800027c <main+0x58>
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	3301      	adds	r3, #1
 800027a:	60fb      	str	r3, [r7, #12]
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d1f8      	bne.n	8000276 <main+0x52>
			*uart++=' ';
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	1c5a      	adds	r2, r3, #1
 8000288:	60fa      	str	r2, [r7, #12]
 800028a:	2220      	movs	r2, #32
 800028c:	701a      	strb	r2, [r3, #0]
			itoa(adc_buf[1], uart, 10);
 800028e:	4b12      	ldr	r3, [pc, #72]	@ (80002d8 <main+0xb4>)
 8000290:	885b      	ldrh	r3, [r3, #2]
 8000292:	220a      	movs	r2, #10
 8000294:	68f9      	ldr	r1, [r7, #12]
 8000296:	4618      	mov	r0, r3
 8000298:	f000 fa66 	bl	8000768 <itoa>
			while(*uart) uart++;
 800029c:	e002      	b.n	80002a4 <main+0x80>
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	3301      	adds	r3, #1
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d1f8      	bne.n	800029e <main+0x7a>
			*uart++='\n';
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	1c5a      	adds	r2, r3, #1
 80002b0:	60fa      	str	r2, [r7, #12]
 80002b2:	220a      	movs	r2, #10
 80002b4:	701a      	strb	r2, [r3, #0]
			*uart = '\0';
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	2200      	movs	r2, #0
 80002ba:	701a      	strb	r2, [r3, #0]
			UART_Write(uart_buf);
 80002bc:	463b      	mov	r3, r7
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 f80c 	bl	80002dc <UART_Write>
			latch = 0;
 80002c4:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <main+0xb0>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	701a      	strb	r2, [r3, #0]
		if(latch == 1){
 80002ca:	e7c5      	b.n	8000258 <main+0x34>
 80002cc:	20000000 	.word	0x20000000
 80002d0:	08000850 	.word	0x08000850
 80002d4:	2000002c 	.word	0x2000002c
 80002d8:	20000028 	.word	0x20000028

080002dc <UART_Write>:
		}
	}
}
void UART_Write(char* s){
 80002dc:	b590      	push	{r4, r7, lr}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
	DMA1_Stream6->CR &= ~DMA_SxCR_EN;
 80002e4:	4b13      	ldr	r3, [pc, #76]	@ (8000334 <UART_Write+0x58>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a12      	ldr	r2, [pc, #72]	@ (8000334 <UART_Write+0x58>)
 80002ea:	f023 0301 	bic.w	r3, r3, #1
 80002ee:	6013      	str	r3, [r2, #0]
	DMA1->HIFCR |= DMA_HIFCR_CTCIF6;
 80002f0:	4b11      	ldr	r3, [pc, #68]	@ (8000338 <UART_Write+0x5c>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	4a10      	ldr	r2, [pc, #64]	@ (8000338 <UART_Write+0x5c>)
 80002f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002fa:	60d3      	str	r3, [r2, #12]
	DMA1_Stream6->M0AR = (uint32_t)s;
 80002fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000334 <UART_Write+0x58>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	60d3      	str	r3, [r2, #12]
	DMA1_Stream6->NDTR = strlen(s);
 8000302:	4c0c      	ldr	r4, [pc, #48]	@ (8000334 <UART_Write+0x58>)
 8000304:	6878      	ldr	r0, [r7, #4]
 8000306:	f7ff ff67 	bl	80001d8 <strlen>
 800030a:	4603      	mov	r3, r0
 800030c:	6063      	str	r3, [r4, #4]
	DMA1_Stream6->CR |= DMA_SxCR_EN;
 800030e:	4b09      	ldr	r3, [pc, #36]	@ (8000334 <UART_Write+0x58>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a08      	ldr	r2, [pc, #32]	@ (8000334 <UART_Write+0x58>)
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	6013      	str	r3, [r2, #0]
	while(!(DMA1->HISR & DMA_HISR_TCIF6));
 800031a:	bf00      	nop
 800031c:	4b06      	ldr	r3, [pc, #24]	@ (8000338 <UART_Write+0x5c>)
 800031e:	685b      	ldr	r3, [r3, #4]
 8000320:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000324:	2b00      	cmp	r3, #0
 8000326:	d0f9      	beq.n	800031c <UART_Write+0x40>
}
 8000328:	bf00      	nop
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	bd90      	pop	{r4, r7, pc}
 8000332:	bf00      	nop
 8000334:	400260a0 	.word	0x400260a0
 8000338:	40026000 	.word	0x40026000

0800033c <DMA_init>:

void DMA_init(void){
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8000340:	4b25      	ldr	r3, [pc, #148]	@ (80003d8 <DMA_init+0x9c>)
 8000342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000344:	4a24      	ldr	r2, [pc, #144]	@ (80003d8 <DMA_init+0x9c>)
 8000346:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800034a:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 800034c:	4b22      	ldr	r3, [pc, #136]	@ (80003d8 <DMA_init+0x9c>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000350:	4a21      	ldr	r2, [pc, #132]	@ (80003d8 <DMA_init+0x9c>)
 8000352:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000356:	6313      	str	r3, [r2, #48]	@ 0x30
//read from adc
	DMA2_Stream0->PAR = (uint32_t)&ADC1->DR;
 8000358:	4b20      	ldr	r3, [pc, #128]	@ (80003dc <DMA_init+0xa0>)
 800035a:	4a21      	ldr	r2, [pc, #132]	@ (80003e0 <DMA_init+0xa4>)
 800035c:	609a      	str	r2, [r3, #8]
	DMA2_Stream0->M0AR = (uint32_t)adc_buf;
 800035e:	4b1f      	ldr	r3, [pc, #124]	@ (80003dc <DMA_init+0xa0>)
 8000360:	4a20      	ldr	r2, [pc, #128]	@ (80003e4 <DMA_init+0xa8>)
 8000362:	60da      	str	r2, [r3, #12]
	DMA2_Stream0->NDTR = SAMPLES_COUNT;
 8000364:	4b1d      	ldr	r3, [pc, #116]	@ (80003dc <DMA_init+0xa0>)
 8000366:	2202      	movs	r2, #2
 8000368:	605a      	str	r2, [r3, #4]
	DMA2_Stream0->CR |= DMA_SxCR_MINC;
 800036a:	4b1c      	ldr	r3, [pc, #112]	@ (80003dc <DMA_init+0xa0>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a1b      	ldr	r2, [pc, #108]	@ (80003dc <DMA_init+0xa0>)
 8000370:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000374:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= DMA_SxCR_CIRC;
 8000376:	4b19      	ldr	r3, [pc, #100]	@ (80003dc <DMA_init+0xa0>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a18      	ldr	r2, [pc, #96]	@ (80003dc <DMA_init+0xa0>)
 800037c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000380:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= DMA_SxCR_MSIZE_0 | DMA_SxCR_PSIZE_0 | DMA_SxCR_CIRC; // 16-bit
 8000382:	4b16      	ldr	r3, [pc, #88]	@ (80003dc <DMA_init+0xa0>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a15      	ldr	r2, [pc, #84]	@ (80003dc <DMA_init+0xa0>)
 8000388:	f443 5324 	orr.w	r3, r3, #10496	@ 0x2900
 800038c:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= (0 << DMA_SxCR_CHSEL_Pos); // Channel 0 for ADC1
 800038e:	4b13      	ldr	r3, [pc, #76]	@ (80003dc <DMA_init+0xa0>)
 8000390:	4a12      	ldr	r2, [pc, #72]	@ (80003dc <DMA_init+0xa0>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= DMA_SxCR_EN;
 8000396:	4b11      	ldr	r3, [pc, #68]	@ (80003dc <DMA_init+0xa0>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4a10      	ldr	r2, [pc, #64]	@ (80003dc <DMA_init+0xa0>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	6013      	str	r3, [r2, #0]
//sent to uart
	DMA1_Stream6->PAR = (uint32_t)&USART2->DR;
 80003a2:	4b11      	ldr	r3, [pc, #68]	@ (80003e8 <DMA_init+0xac>)
 80003a4:	4a11      	ldr	r2, [pc, #68]	@ (80003ec <DMA_init+0xb0>)
 80003a6:	609a      	str	r2, [r3, #8]
	DMA1_Stream6->CR |= DMA_SxCR_DIR_0;
 80003a8:	4b0f      	ldr	r3, [pc, #60]	@ (80003e8 <DMA_init+0xac>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a0e      	ldr	r2, [pc, #56]	@ (80003e8 <DMA_init+0xac>)
 80003ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003b2:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR |= DMA_SxCR_MINC;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	@ (80003e8 <DMA_init+0xac>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a0b      	ldr	r2, [pc, #44]	@ (80003e8 <DMA_init+0xac>)
 80003ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003be:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR |= 0b100 << DMA_SxCR_CHSEL_Pos;
 80003c0:	4b09      	ldr	r3, [pc, #36]	@ (80003e8 <DMA_init+0xac>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a08      	ldr	r2, [pc, #32]	@ (80003e8 <DMA_init+0xac>)
 80003c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80003ca:	6013      	str	r3, [r2, #0]
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40023800 	.word	0x40023800
 80003dc:	40026410 	.word	0x40026410
 80003e0:	4001204c 	.word	0x4001204c
 80003e4:	20000028 	.word	0x20000028
 80003e8:	400260a0 	.word	0x400260a0
 80003ec:	40004404 	.word	0x40004404

080003f0 <TIM2_init>:
void TIM2_init(void){
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80003f4:	4b19      	ldr	r3, [pc, #100]	@ (800045c <TIM2_init+0x6c>)
 80003f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003f8:	4a18      	ldr	r2, [pc, #96]	@ (800045c <TIM2_init+0x6c>)
 80003fa:	f043 0301 	orr.w	r3, r3, #1
 80003fe:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM2->PSC = TIM_PSC;
 8000400:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000404:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000408:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = TIM_ARR;
 800040a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800040e:	2264      	movs	r2, #100	@ 0x64
 8000410:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->DIER |= TIM_DIER_UIE;
 8000412:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800041c:	f043 0301 	orr.w	r3, r3, #1
 8000420:	60d3      	str	r3, [r2, #12]
	TIM2->CR2 |= 0b010 << TIM_CR2_MMS_Pos; //TRGO
 8000422:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800042c:	f043 0320 	orr.w	r3, r3, #32
 8000430:	6053      	str	r3, [r2, #4]
	TIM2->EGR |= TIM_EGR_UG;
 8000432:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800043c:	f043 0301 	orr.w	r3, r3, #1
 8000440:	6153      	str	r3, [r2, #20]
	TIM2->CR1 |= TIM_CR1_CEN;
 8000442:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800044c:	f043 0301 	orr.w	r3, r3, #1
 8000450:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(TIM2_IRQn);
 8000452:	201c      	movs	r0, #28
 8000454:	f7ff fec8 	bl	80001e8 <__NVIC_EnableIRQ>
}
 8000458:	bf00      	nop
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40023800 	.word	0x40023800

08000460 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void){
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
	if(TIM2->SR & TIM_SR_UIF){
 8000464:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000468:	691b      	ldr	r3, [r3, #16]
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	2b00      	cmp	r3, #0
 8000470:	d011      	beq.n	8000496 <TIM2_IRQHandler+0x36>
		TIM2->SR &= ~TIM_SR_UIF;
 8000472:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000476:	691b      	ldr	r3, [r3, #16]
 8000478:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800047c:	f023 0301 	bic.w	r3, r3, #1
 8000480:	6113      	str	r3, [r2, #16]
		latch = 1;
 8000482:	4b07      	ldr	r3, [pc, #28]	@ (80004a0 <TIM2_IRQHandler+0x40>)
 8000484:	2201      	movs	r2, #1
 8000486:	701a      	strb	r2, [r3, #0]
		count++;
 8000488:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <TIM2_IRQHandler+0x44>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	b2db      	uxtb	r3, r3
 800048e:	3301      	adds	r3, #1
 8000490:	b2da      	uxtb	r2, r3
 8000492:	4b04      	ldr	r3, [pc, #16]	@ (80004a4 <TIM2_IRQHandler+0x44>)
 8000494:	701a      	strb	r2, [r3, #0]
	}
}
 8000496:	bf00      	nop
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	2000002c 	.word	0x2000002c
 80004a4:	2000002d 	.word	0x2000002d

080004a8 <ADC1_init>:
void ADC1_init(void){
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80004ac:	4b28      	ldr	r3, [pc, #160]	@ (8000550 <ADC1_init+0xa8>)
 80004ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004b0:	4a27      	ldr	r2, [pc, #156]	@ (8000550 <ADC1_init+0xa8>)
 80004b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004b6:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80004b8:	4b25      	ldr	r3, [pc, #148]	@ (8000550 <ADC1_init+0xa8>)
 80004ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004bc:	4a24      	ldr	r2, [pc, #144]	@ (8000550 <ADC1_init+0xa8>)
 80004be:	f043 0302 	orr.w	r3, r3, #2
 80004c2:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER |= 0b11 << GPIO_MODER_MODE0_Pos | 0b11 << GPIO_MODER_MODE1_Pos;
 80004c4:	4b23      	ldr	r3, [pc, #140]	@ (8000554 <ADC1_init+0xac>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a22      	ldr	r2, [pc, #136]	@ (8000554 <ADC1_init+0xac>)
 80004ca:	f043 030f 	orr.w	r3, r3, #15
 80004ce:	6013      	str	r3, [r2, #0]
	ADC1->SMPR2 |= 0b111 << ADC_SMPR2_SMP0_Pos;
 80004d0:	4b21      	ldr	r3, [pc, #132]	@ (8000558 <ADC1_init+0xb0>)
 80004d2:	691b      	ldr	r3, [r3, #16]
 80004d4:	4a20      	ldr	r2, [pc, #128]	@ (8000558 <ADC1_init+0xb0>)
 80004d6:	f043 0307 	orr.w	r3, r3, #7
 80004da:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 |= 0b111 << ADC_SMPR2_SMP1_Pos;
 80004dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000558 <ADC1_init+0xb0>)
 80004de:	691b      	ldr	r3, [r3, #16]
 80004e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000558 <ADC1_init+0xb0>)
 80004e2:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80004e6:	6113      	str	r3, [r2, #16]
    ADC1->SQR1 = 0;
 80004e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000558 <ADC1_init+0xb0>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	62da      	str	r2, [r3, #44]	@ 0x2c
	ADC1->SQR1 |= 1 << ADC_SQR1_L_Pos;
 80004ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000558 <ADC1_init+0xb0>)
 80004f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004f2:	4a19      	ldr	r2, [pc, #100]	@ (8000558 <ADC1_init+0xb0>)
 80004f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80004f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    ADC1->SQR3 = 0;
 80004fa:	4b17      	ldr	r3, [pc, #92]	@ (8000558 <ADC1_init+0xb0>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	635a      	str	r2, [r3, #52]	@ 0x34
	ADC1->SQR3 |= 0 << ADC_SQR3_SQ1_Pos;
 8000500:	4b15      	ldr	r3, [pc, #84]	@ (8000558 <ADC1_init+0xb0>)
 8000502:	4a15      	ldr	r2, [pc, #84]	@ (8000558 <ADC1_init+0xb0>)
 8000504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000506:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC1->SQR3 |= 1 << ADC_SQR3_SQ2_Pos;
 8000508:	4b13      	ldr	r3, [pc, #76]	@ (8000558 <ADC1_init+0xb0>)
 800050a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800050c:	4a12      	ldr	r2, [pc, #72]	@ (8000558 <ADC1_init+0xb0>)
 800050e:	f043 0320 	orr.w	r3, r3, #32
 8000512:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC1->CR1 |= ADC_CR1_SCAN;
 8000514:	4b10      	ldr	r3, [pc, #64]	@ (8000558 <ADC1_init+0xb0>)
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	4a0f      	ldr	r2, [pc, #60]	@ (8000558 <ADC1_init+0xb0>)
 800051a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800051e:	6053      	str	r3, [r2, #4]

	ADC1->CR2 |= ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_EOCS;
 8000520:	4b0d      	ldr	r3, [pc, #52]	@ (8000558 <ADC1_init+0xb0>)
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	4a0c      	ldr	r2, [pc, #48]	@ (8000558 <ADC1_init+0xb0>)
 8000526:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800052a:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= 0b0110 << ADC_CR2_EXTSEL_Pos | 0b001 << ADC_CR2_EXTEN_Pos;
 800052c:	4b0a      	ldr	r3, [pc, #40]	@ (8000558 <ADC1_init+0xb0>)
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	4a09      	ldr	r2, [pc, #36]	@ (8000558 <ADC1_init+0xb0>)
 8000532:	f043 53b0 	orr.w	r3, r3, #369098752	@ 0x16000000
 8000536:	6093      	str	r3, [r2, #8]

	ADC1->CR2 |= ADC_CR2_ADON;
 8000538:	4b07      	ldr	r3, [pc, #28]	@ (8000558 <ADC1_init+0xb0>)
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	4a06      	ldr	r2, [pc, #24]	@ (8000558 <ADC1_init+0xb0>)
 800053e:	f043 0301 	orr.w	r3, r3, #1
 8000542:	6093      	str	r3, [r2, #8]
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40023800 	.word	0x40023800
 8000554:	40020000 	.word	0x40020000
 8000558:	40012000 	.word	0x40012000

0800055c <UART2_init>:
void UART2_init(void){
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000560:	4b21      	ldr	r3, [pc, #132]	@ (80005e8 <UART2_init+0x8c>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000564:	4a20      	ldr	r2, [pc, #128]	@ (80005e8 <UART2_init+0x8c>)
 8000566:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800056a:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800056c:	4b1e      	ldr	r3, [pc, #120]	@ (80005e8 <UART2_init+0x8c>)
 800056e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000570:	4a1d      	ldr	r2, [pc, #116]	@ (80005e8 <UART2_init+0x8c>)
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	6313      	str	r3, [r2, #48]	@ 0x30

	//PA2 - TX2 | PA3 - RX2
	GPIOA->MODER |= GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1;
 8000578:	4b1c      	ldr	r3, [pc, #112]	@ (80005ec <UART2_init+0x90>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a1b      	ldr	r2, [pc, #108]	@ (80005ec <UART2_init+0x90>)
 800057e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000582:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (0b0111 << GPIO_AFRL_AFSEL2_Pos); // AF 0111 | USART2 TX
 8000584:	4b19      	ldr	r3, [pc, #100]	@ (80005ec <UART2_init+0x90>)
 8000586:	6a1b      	ldr	r3, [r3, #32]
 8000588:	4a18      	ldr	r2, [pc, #96]	@ (80005ec <UART2_init+0x90>)
 800058a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800058e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0b0111 << GPIO_AFRL_AFSEL3_Pos); // AF 0111 | USART2 RX
 8000590:	4b16      	ldr	r3, [pc, #88]	@ (80005ec <UART2_init+0x90>)
 8000592:	6a1b      	ldr	r3, [r3, #32]
 8000594:	4a15      	ldr	r2, [pc, #84]	@ (80005ec <UART2_init+0x90>)
 8000596:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 800059a:	6213      	str	r3, [r2, #32]
	while(!(RCC->APB1ENR & RCC_APB1ENR_USART2EN));
 800059c:	bf00      	nop
 800059e:	4b12      	ldr	r3, [pc, #72]	@ (80005e8 <UART2_init+0x8c>)
 80005a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0f9      	beq.n	800059e <UART2_init+0x42>
	USART2->BRR = SystemCoreClock/BAUDRATE;
 80005aa:	4b11      	ldr	r3, [pc, #68]	@ (80005f0 <UART2_init+0x94>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a11      	ldr	r2, [pc, #68]	@ (80005f4 <UART2_init+0x98>)
 80005b0:	4911      	ldr	r1, [pc, #68]	@ (80005f8 <UART2_init+0x9c>)
 80005b2:	fba1 1303 	umull	r1, r3, r1, r3
 80005b6:	0c1b      	lsrs	r3, r3, #16
 80005b8:	6093      	str	r3, [r2, #8]
	USART2->CR3 |= USART_CR3_DMAT;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <UART2_init+0x98>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	4a0d      	ldr	r2, [pc, #52]	@ (80005f4 <UART2_init+0x98>)
 80005c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005c4:	6153      	str	r3, [r2, #20]
	USART2->CR1 |= USART_CR1_TE;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	@ (80005f4 <UART2_init+0x98>)
 80005c8:	68db      	ldr	r3, [r3, #12]
 80005ca:	4a0a      	ldr	r2, [pc, #40]	@ (80005f4 <UART2_init+0x98>)
 80005cc:	f043 0308 	orr.w	r3, r3, #8
 80005d0:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_UE;
 80005d2:	4b08      	ldr	r3, [pc, #32]	@ (80005f4 <UART2_init+0x98>)
 80005d4:	68db      	ldr	r3, [r3, #12]
 80005d6:	4a07      	ldr	r2, [pc, #28]	@ (80005f4 <UART2_init+0x98>)
 80005d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005dc:	60d3      	str	r3, [r2, #12]
}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40020000 	.word	0x40020000
 80005f0:	20000004 	.word	0x20000004
 80005f4:	40004400 	.word	0x40004400
 80005f8:	165e9f81 	.word	0x165e9f81

080005fc <READY>:
void READY(void){
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000600:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <READY+0x34>)
 8000602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000604:	4a0a      	ldr	r2, [pc, #40]	@ (8000630 <READY+0x34>)
 8000606:	f043 0304 	orr.w	r3, r3, #4
 800060a:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOC->MODER |= GPIO_MODER_MODE13_0;
 800060c:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <READY+0x38>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a08      	ldr	r2, [pc, #32]	@ (8000634 <READY+0x38>)
 8000612:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000616:	6013      	str	r3, [r2, #0]
    GPIOC->ODR &= ~GPIO_ODR_OD13;;
 8000618:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <READY+0x38>)
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	4a05      	ldr	r2, [pc, #20]	@ (8000634 <READY+0x38>)
 800061e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000622:	6153      	str	r3, [r2, #20]
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40020800 	.word	0x40020800

08000638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <NMI_Handler+0x4>

08000640 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <HardFault_Handler+0x4>

08000648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <MemManage_Handler+0x4>

08000650 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <BusFault_Handler+0x4>

08000658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <UsageFault_Handler+0x4>

08000660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800068e:	f000 f83f 	bl	8000710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800069c:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <SystemInit+0x20>)
 800069e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006a2:	4a05      	ldr	r2, [pc, #20]	@ (80006b8 <SystemInit+0x20>)
 80006a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80006bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80006c0:	f7ff ffea 	bl	8000698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006c4:	480c      	ldr	r0, [pc, #48]	@ (80006f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006c6:	490d      	ldr	r1, [pc, #52]	@ (80006fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000700 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006cc:	e002      	b.n	80006d4 <LoopCopyDataInit>

080006ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d2:	3304      	adds	r3, #4

080006d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d8:	d3f9      	bcc.n	80006ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006da:	4a0a      	ldr	r2, [pc, #40]	@ (8000704 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000708 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e0:	e001      	b.n	80006e6 <LoopFillZerobss>

080006e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e4:	3204      	adds	r2, #4

080006e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e8:	d3fb      	bcc.n	80006e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ea:	f000 f881 	bl	80007f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006ee:	f7ff fd99 	bl	8000224 <main>
  bx  lr    
 80006f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80006f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000700:	08000898 	.word	0x08000898
  ldr r2, =_sbss
 8000704:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000708:	20000034 	.word	0x20000034

0800070c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800070c:	e7fe      	b.n	800070c <ADC_IRQHandler>
	...

08000710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000714:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <HAL_IncTick+0x20>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	461a      	mov	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <HAL_IncTick+0x24>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4413      	add	r3, r2
 8000720:	4a04      	ldr	r2, [pc, #16]	@ (8000734 <HAL_IncTick+0x24>)
 8000722:	6013      	str	r3, [r2, #0]
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	20000008 	.word	0x20000008
 8000734:	20000030 	.word	0x20000030

08000738 <__itoa>:
 8000738:	1e93      	subs	r3, r2, #2
 800073a:	2b22      	cmp	r3, #34	@ 0x22
 800073c:	b510      	push	{r4, lr}
 800073e:	460c      	mov	r4, r1
 8000740:	d904      	bls.n	800074c <__itoa+0x14>
 8000742:	2300      	movs	r3, #0
 8000744:	700b      	strb	r3, [r1, #0]
 8000746:	461c      	mov	r4, r3
 8000748:	4620      	mov	r0, r4
 800074a:	bd10      	pop	{r4, pc}
 800074c:	2a0a      	cmp	r2, #10
 800074e:	d109      	bne.n	8000764 <__itoa+0x2c>
 8000750:	2800      	cmp	r0, #0
 8000752:	da07      	bge.n	8000764 <__itoa+0x2c>
 8000754:	232d      	movs	r3, #45	@ 0x2d
 8000756:	700b      	strb	r3, [r1, #0]
 8000758:	4240      	negs	r0, r0
 800075a:	2101      	movs	r1, #1
 800075c:	4421      	add	r1, r4
 800075e:	f000 f805 	bl	800076c <__utoa>
 8000762:	e7f1      	b.n	8000748 <__itoa+0x10>
 8000764:	2100      	movs	r1, #0
 8000766:	e7f9      	b.n	800075c <__itoa+0x24>

08000768 <itoa>:
 8000768:	f7ff bfe6 	b.w	8000738 <__itoa>

0800076c <__utoa>:
 800076c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800076e:	4c1f      	ldr	r4, [pc, #124]	@ (80007ec <__utoa+0x80>)
 8000770:	b08b      	sub	sp, #44	@ 0x2c
 8000772:	4605      	mov	r5, r0
 8000774:	460b      	mov	r3, r1
 8000776:	466e      	mov	r6, sp
 8000778:	f104 0c20 	add.w	ip, r4, #32
 800077c:	6820      	ldr	r0, [r4, #0]
 800077e:	6861      	ldr	r1, [r4, #4]
 8000780:	4637      	mov	r7, r6
 8000782:	c703      	stmia	r7!, {r0, r1}
 8000784:	3408      	adds	r4, #8
 8000786:	4564      	cmp	r4, ip
 8000788:	463e      	mov	r6, r7
 800078a:	d1f7      	bne.n	800077c <__utoa+0x10>
 800078c:	7921      	ldrb	r1, [r4, #4]
 800078e:	7139      	strb	r1, [r7, #4]
 8000790:	1e91      	subs	r1, r2, #2
 8000792:	6820      	ldr	r0, [r4, #0]
 8000794:	6038      	str	r0, [r7, #0]
 8000796:	2922      	cmp	r1, #34	@ 0x22
 8000798:	f04f 0100 	mov.w	r1, #0
 800079c:	d904      	bls.n	80007a8 <__utoa+0x3c>
 800079e:	7019      	strb	r1, [r3, #0]
 80007a0:	460b      	mov	r3, r1
 80007a2:	4618      	mov	r0, r3
 80007a4:	b00b      	add	sp, #44	@ 0x2c
 80007a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007a8:	1e58      	subs	r0, r3, #1
 80007aa:	4684      	mov	ip, r0
 80007ac:	fbb5 f7f2 	udiv	r7, r5, r2
 80007b0:	fb02 5617 	mls	r6, r2, r7, r5
 80007b4:	3628      	adds	r6, #40	@ 0x28
 80007b6:	446e      	add	r6, sp
 80007b8:	460c      	mov	r4, r1
 80007ba:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80007be:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80007c2:	462e      	mov	r6, r5
 80007c4:	42b2      	cmp	r2, r6
 80007c6:	f101 0101 	add.w	r1, r1, #1
 80007ca:	463d      	mov	r5, r7
 80007cc:	d9ee      	bls.n	80007ac <__utoa+0x40>
 80007ce:	2200      	movs	r2, #0
 80007d0:	545a      	strb	r2, [r3, r1]
 80007d2:	1919      	adds	r1, r3, r4
 80007d4:	1aa5      	subs	r5, r4, r2
 80007d6:	42aa      	cmp	r2, r5
 80007d8:	dae3      	bge.n	80007a2 <__utoa+0x36>
 80007da:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80007de:	780e      	ldrb	r6, [r1, #0]
 80007e0:	7006      	strb	r6, [r0, #0]
 80007e2:	3201      	adds	r2, #1
 80007e4:	f801 5901 	strb.w	r5, [r1], #-1
 80007e8:	e7f4      	b.n	80007d4 <__utoa+0x68>
 80007ea:	bf00      	nop
 80007ec:	08000862 	.word	0x08000862

080007f0 <__libc_init_array>:
 80007f0:	b570      	push	{r4, r5, r6, lr}
 80007f2:	4d0d      	ldr	r5, [pc, #52]	@ (8000828 <__libc_init_array+0x38>)
 80007f4:	4c0d      	ldr	r4, [pc, #52]	@ (800082c <__libc_init_array+0x3c>)
 80007f6:	1b64      	subs	r4, r4, r5
 80007f8:	10a4      	asrs	r4, r4, #2
 80007fa:	2600      	movs	r6, #0
 80007fc:	42a6      	cmp	r6, r4
 80007fe:	d109      	bne.n	8000814 <__libc_init_array+0x24>
 8000800:	4d0b      	ldr	r5, [pc, #44]	@ (8000830 <__libc_init_array+0x40>)
 8000802:	4c0c      	ldr	r4, [pc, #48]	@ (8000834 <__libc_init_array+0x44>)
 8000804:	f000 f818 	bl	8000838 <_init>
 8000808:	1b64      	subs	r4, r4, r5
 800080a:	10a4      	asrs	r4, r4, #2
 800080c:	2600      	movs	r6, #0
 800080e:	42a6      	cmp	r6, r4
 8000810:	d105      	bne.n	800081e <__libc_init_array+0x2e>
 8000812:	bd70      	pop	{r4, r5, r6, pc}
 8000814:	f855 3b04 	ldr.w	r3, [r5], #4
 8000818:	4798      	blx	r3
 800081a:	3601      	adds	r6, #1
 800081c:	e7ee      	b.n	80007fc <__libc_init_array+0xc>
 800081e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000822:	4798      	blx	r3
 8000824:	3601      	adds	r6, #1
 8000826:	e7f2      	b.n	800080e <__libc_init_array+0x1e>
 8000828:	08000890 	.word	0x08000890
 800082c:	08000890 	.word	0x08000890
 8000830:	08000890 	.word	0x08000890
 8000834:	08000894 	.word	0x08000894

08000838 <_init>:
 8000838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800083a:	bf00      	nop
 800083c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800083e:	bc08      	pop	{r3}
 8000840:	469e      	mov	lr, r3
 8000842:	4770      	bx	lr

08000844 <_fini>:
 8000844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000846:	bf00      	nop
 8000848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800084a:	bc08      	pop	{r3}
 800084c:	469e      	mov	lr, r3
 800084e:	4770      	bx	lr
